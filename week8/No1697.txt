1).해당 문제 해결 기법을 사용한 근거 (논리적인 근거)
① 문제인식
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. 
N과 K는 정수이다.

② 문제 유형 파악:
수빈이는 동생과 숨바꼭질을 하고 있다. 
수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 
동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 
수빈이는 걷거나 순간이동을 할 수 있다. 
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

=> 다이나믹 프로그래밍, 너비 우선 탐색

2). 의사 코드 또는 DFA 다이어그램 작성 (대략적으로 작성)
➀ Queue<Integer> queue = new LinkedList<Integer>()
visited[] = new int[100001]
visited[index] = 1  : 수빈이의 위치 및 방문 여부 저장

➁ queue.isEmpty() == false 큐에 노드 저장 후 remove하면서 검사 

➂ if (n == K){
    return visited[n]-1;
}
if (n-1>=0 && visited[n-1] == 0){
    visited[n-1] = visited[n]+1;
    queue.add(n-1);
}
if (n+1 <= 100000 && visited[n+1] == 0){
    visited[n+1] = visited[n]+1;
    queue.add(n+1);
}
if (2*n <= 100000 && visited[2*n] == 0){
    visited[2*n] = visited[n] + 1;
    queue.add(2*n);
} 방문 여부와 초 수에 따라 위치 갱신 