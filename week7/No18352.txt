1).해당 문제 해결 기법을 사용한 근거 (논리적인 근거)
① 문제인식
첫째 줄에 도시의 개수 N, 도로의 개수 M, 거리 정보 K, 출발 도시의 번호 X 
(2 ≤ N ≤ 300,000, 1 ≤ M ≤ 1,000,000, 1 ≤ K ≤ 300,000, 1 ≤ X ≤ N)
둘째 줄부터 M개의 줄에 걸쳐서 두 개의 자연수 A, B가 공백을 기준으로 구분  (1 ≤ A, B ≤ N) 


② 문제 유형 파악:
X로부터 출발하여 도달할 수 있는 도시 중에서, 
최단 거리가 K인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.

이 때 도달할 수 있는 도시 중에서, 
최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력한다.

=> 다이나믹 프로그래밍, 너비 우선 탐색

2). 의사 코드 또는 DFA 다이어그램 작성 (대략적으로 작성)
➀  List<Integer>[] edges = new List[n+1]; 마을에 대한 정보 저장
 edges[i] = new ArrayList<>(); => edges[a].add(b); ArrayList로 마을이 연결된 도시 저장
➁ int[] dist = new int[n+1]; 다녀간 도로의 수 도로의 수가 많은 것부터 탐색하며 가장 작은 수 저장
➂ 출발 도시의 번호 X 기준으로 먼저 탐색 
갈 수 있는 마을이 없을 경우 -1 출력 입력받은 K수가 같은 다녀간 도로의 수인 마을 출력